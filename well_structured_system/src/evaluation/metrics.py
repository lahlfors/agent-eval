"""Provides a collection of evaluation metric functions.

Each function in this module represents a specific metric used to compare
the output of a system with a "ground truth" reference. These functions
adhere to a standard signature, accepting the ground truth and the actual
output, and returning a float score. This allows them to be used interchangeably
within the evaluation pipeline.
"""

from typing import Any, Set

def exact_match(ground_truth: str, actual_output: str) -> float:
    """Calculates the exact match score between two strings.

    This metric performs a case-sensitive comparison of two strings after
    stripping leading/trailing whitespace. It is a strict metric, suitable
    for cases where the output must be precise.

    Args:
        ground_truth: The reference string.
        actual_output: The string generated by the system under test.

    Returns:
        1.0 if the strings are identical after stripping whitespace,
        0.0 otherwise. Returns 0.0 if inputs are not strings.
    """
    if not isinstance(ground_truth, str) or not isinstance(actual_output, str):
        return 0.0
    return 1.0 if ground_truth.strip() == actual_output.strip() else 0.0

def jaccard_similarity(ground_truth: Set[Any], actual_output: Set[Any]) -> float:
    """Calculates the Jaccard similarity between two sets.

    Jaccard similarity, or the Jaccard index, is a statistic used for gauging
    the similarity and diversity of sample sets. It is defined as the size of
    the intersection divided by the size of the union of the two sets. A value
    of 1.0 means the sets are identical, while 0.0 means they have no elements
    in common.

    Args:
        ground_truth: The reference set of items.
        actual_output: The set of items generated by the system under test.

    Returns:
        The Jaccard similarity score as a float between 0.0 and 1.0.
        Returns 1.0 if both sets are empty. Returns 0.0 if inputs are not sets.
    """
    if not isinstance(ground_truth, set) or not isinstance(actual_output, set):
        return 0.0

    intersection_size = len(ground_truth.intersection(actual_output))
    union_size = len(ground_truth.union(actual_output))

    if union_size == 0:
        return 1.0  # Both sets are empty, considered identical.

    return intersection_size / union_size
